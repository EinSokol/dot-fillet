{"clipboardHistory":[{"value":"gimp","recorded":"2025-05-18 17:58:08.427049135","filePath":"null","pinned":false},{"value":"class","recorded":"2025-05-18 17:57:58.593118285","filePath":"null","pinned":false},{"value":"$XDG_CACHE_HOME","recorded":"2025-05-18 16:46:47.388470698","filePath":"null","pinned":false},{"value":"cat $XDG_RUNTIME_DIR/hypr/$(ls -t $XDG_RUNTIME_DIR/hypr/ | head -n 2 | tail -n 1)/hyprland.log","recorded":"2025-05-18 16:46:25.537287095","filePath":"null","pinned":false},{"value":"true ","recorded":"2025-05-18 16:44:32.916091182","filePath":"null","pinned":false},{"value":"git clone https://github.com/hyprwm/hyprutils.git\ncd hyprutils/\ncmake --no-warn-unused-cli -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_INSTALL_PREFIX:PATH=/usr -S . -B ./build\ncmake --build ./build --config Release --target all -j`nproc 2\u003e/dev/null || getconf NPROCESSORS_CONF`\nsudo cmake --install build","recorded":"2025-05-18 15:54:49.667179875","filePath":"null","pinned":false},{"value":"cat $XDG_RUNTIME_DIR/hypr/$(ls -t $XDG_RUNTIME_DIR/hypr/ | head -n 1)/hyprland.log\n","recorded":"2025-05-18 15:46:54.409869965","filePath":"null","pinned":false},{"value":",X11","recorded":"2025-05-18 15:41:13.928089832","filePath":"null","pinned":false},{"value":"IO_PAGE_FAULT domain=0x0015 address=0x0 flags=0x0000","recorded":"2025-05-18 15:33:29.803397038","filePath":"null","pinned":false},{"value":"üì∑ 665692-711904752.png","recorded":"2025-05-17 18:37:55.900731244","filePath":"/home/Administrator/.config/clipse/tmp_files/665692-711904752.png","pinned":false},{"value":"üì∑ 25823-781892755.png","recorded":"2025-05-17 18:37:49.845339727","filePath":"/home/Administrator/.config/clipse/tmp_files/25823-781892755.png","pinned":false},{"value":"üì∑ 38744-880218683.png","recorded":"2025-05-17 18:37:11.934907751","filePath":"/home/Administrator/.config/clipse/tmp_files/38744-880218683.png","pinned":false},{"value":"kitty","recorded":"2025-05-17 18:21:41.269080783","filePath":"null","pinned":false},{"value":" 1.0 1.0","recorded":"2025-05-17 18:21:35.561321325","filePath":"null","pinned":false},{"value":"9","recorded":"2025-05-17 18:21:31.696091960","filePath":"null","pinned":false},{"value":".","recorded":"2025-05-17 18:21:31.294890670","filePath":"null","pinned":false},{"value":"windowrule = opacity 0.99 override 1.0 1.0, class:^(kitty)$\n","recorded":"2025-05-17 18:21:13.851061543","filePath":"null","pinned":false},{"value":"wheatley ","recorded":"2025-05-17 18:11:23.012453817","filePath":"null","pinned":false},{"value":"zippy ","recorded":"2025-05-17 18:11:18.410516833","filePath":"null","pinned":false},{"value":"1440x2560","recorded":"2025-05-17 16:52:00.876241011","filePath":"null","pinned":false},{"value":"auto","recorded":"2025-05-17 16:51:09.162654371","filePath":"null","pinned":false},{"value":"0","recorded":"2025-05-17 16:50:25.780096437","filePath":"null","pinned":false},{"value":"6","recorded":"2025-05-17 16:50:25.611752068","filePath":"null","pinned":false},{"value":"@","recorded":"2025-05-17 16:50:25.405266132","filePath":"null","pinned":false},{"value":"1920x1080","recorded":"2025-05-17 16:50:23.635588162","filePath":"null","pinned":false},{"value":"sudo python3 darkmatter-theme.py -u\n","recorded":"2025-05-17 16:11:00.378801928","filePath":"null","pinned":false},{"value":"\"","recorded":"2025-05-17 16:05:25.424070558","filePath":"null","pinned":false},{"value":"# grub-mkconfig -o /boot/grub/grub.cfg\n","recorded":"2025-05-17 16:01:49.582561513","filePath":"null","pinned":false},{"value":"5","recorded":"2025-05-17 15:58:11.050889734","filePath":"null","pinned":false},{"value":"x","recorded":"2025-05-17 15:58:09.880146279","filePath":"null","pinned":false},{"value":"p","recorded":"2025-05-17 15:58:09.317792172","filePath":"null","pinned":false},{"value":"    border-bottom: solid 2px rgba(50,230,250,0.8);\n","recorded":"2025-05-17 15:56:50.574103790","filePath":"null","pinned":false},{"value":"bottom","recorded":"2025-05-17 15:56:28.148303750","filePath":"null","pinned":false},{"value":"-","recorded":"2025-05-17 15:56:27.809196034","filePath":"null","pinned":false},{"value":"margin","recorded":"2025-05-17 15:56:13.133815587","filePath":"null","pinned":false},{"value":"sudo python3 darkmatter-theme.py -i\n","recorded":"2025-05-17 15:45:42.867532225","filePath":"null","pinned":false},{"value":"https://github.com/EliverLara/Sweet.git","recorded":"2025-05-17 15:29:08.555194515","filePath":"null","pinned":false},{"value":"kitten icat \"$(ls --no-quotes | grep -E \"\\.((jpg)|(png)|(jpeg))$\" | while read -r file; do echo \"img:${file}:text:${file}\"; done | wofi -d -I | sed 's/.*\\:text\\://')\"","recorded":"2025-05-17 14:53:27.333100591","filePath":"null","pinned":true},{"value":"path = \"/usr/share/backgrounds/greeter.jpg\"\n","recorded":"2025-05-17 12:43:58.861847645","filePath":"null","pinned":false},{"value":",mirror,eDP-1","recorded":"2025-05-17 12:41:08.817169756","filePath":"null","pinned":false},{"value":"‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö","recorded":"2025-05-17 12:34:03.660471882","filePath":"null","pinned":false},{"value":"\u003e·¥ó\u003c","recorded":"2025-05-17 12:27:17.789311633","filePath":"null","pinned":false},{"value":"# SPDX-FileCopyrightText: 2022 Harish Rajagopal \u003charish.rajagopals@gmail.com\u003e\n#\n# SPDX-License-Identifier: GPL-3.0-or-later\n\n[background]\n# Path to the background image\npath = \"/usr/share/backgrounds/greeter.jpg\"\n\n# How the background image covers the screen if the aspect ratio doesn't match\n# Available values: \"Fill\", \"Contain\", \"Cover\", \"ScaleDown\"\n# Refer to: https://docs.gtk.org/gtk4/enum.ContentFit.html\n# NOTE: This is ignored if ReGreet isn't compiled with GTK v4.8 support.\nfit = \"Contain\"\n\n# The entries defined in this section will be passed to the session as environment variables when it is started\n[env]\nENV_VARIABLE = \"value\"\n\n[GTK]\n# Whether to use the dark theme\napplication_prefer_dark_theme = true\n\n# Cursor theme name\ncursor_theme_name = \"Adwaita\"\n\n# Font name and size\nfont_name = \"Cantarell 16\"\n\n# Icon theme name\nicon_theme_name = \"Adwaita\"\n\n# GTK theme name\ntheme_name = \"Adwaita\"\n\n[commands]\n# The command used to reboot the system\nreboot = [\"systemctl\", \"reboot\"]\n\n# The command used to shut down the system\npoweroff = [\"systemctl\", \"poweroff\"]\n\n# The command prefix for X11 sessions to start the X server\nx11_prefix = [ \"startx\", \"/usr/bin/env\" ]\n\n[appearance]\n# The message that initially displays on startup\ngreeting_msg = \"Welcome back!\"\n\n\n[widget.clock]\n# strftime format argument\n# See https://docs.rs/jiff/0.1.14/jiff/fmt/strtime/index.html#conversion-specifications\nformat = \"%a %H:%M\"\n\n# How often to update the text\nresolution = \"500ms\"\n\n# Override system timezone (IANA Time Zone Database name, aka /etc/zoneinfo path)\n# Remove to use the system time zone.\ntimezone = \"America/Chicago\"\n\n# Ask GTK to make the label at least this wide. This helps keeps the parent element layout and width consistent.\n# Experiment with different widths, the interpretation of this value is entirely up to GTK.\nlabel_width = 150","recorded":"2025-05-17 12:24:51.839572405","filePath":"null","pinned":false},{"value":"env = GTK_USE_PORTAL,0\nenv = GDK_DEBUG,no-portals","recorded":"2025-05-17 12:23:14.115334818","filePath":"null","pinned":false},{"value":"Hyprland --config /etc/greetd/hyprland.conf","recorded":"2025-05-17 11:48:10.827708443","filePath":"null","pinned":false},{"value":"true","recorded":"2025-05-17 11:24:50.204070260","filePath":"null","pinned":false},{"value":"default","recorded":"2025-05-16 22:55:11.241131439","filePath":"null","pinned":false},{"value":"exec-once = qtgreet; hyprctl dispatch exit\n","recorded":"2025-05-16 22:37:33.652789370","filePath":"null","pinned":false},{"value":"command = \"Hyprland --config /etc/greetd/hyprland.conf\"\n","recorded":"2025-05-16 22:36:16.671939394","filePath":"null","pinned":false},{"value":"if uwsm check may-start; then\n    exec uwsm start hyprland.desktop\nfi","recorded":"2025-05-16 22:10:39.159314732","filePath":"null","pinned":false},{"value":"/bin/sh","recorded":"2025-05-16 22:03:18.677946067","filePath":"null","pinned":false},{"value":": SplitParser {","recorded":"2025-05-16 21:03:28.222808117","filePath":"null","pinned":false},{"value":"}","recorded":"2025-05-16 21:02:59.284487974","filePath":"null","pinned":false},{"value":"require(\"lspconfig\").qmlls.setup {\n  cmd = {\"qmlls\", \"-E\"}\n}","recorded":"2025-05-16 21:00:55.667412243","filePath":"null","pinned":false},{"value":"\t\t\t\tqmlls = {\n          mason = false,\n\t\t\t\t\tcmd = { \"qmlls\", \"-E\" },\n\t\t\t\t},\n","recorded":"2025-05-16 21:00:40.402363298","filePath":"null","pinned":false},{"value":"\t\t\t\tqmlls = function(_, opts)\n\t\t\t\t\trequire(\"qmlls\").setup({ cmd = { \"qmlls\", -E } })\n\t\t\t\t\treturn true\n\t\t\t\tend,\n","recorded":"2025-05-16 20:55:12.540121439","filePath":"null","pinned":false},{"value":"        require\"\"\n","recorded":"2025-05-16 20:45:11.035728133","filePath":"null","pinned":false},{"value":"fjsdjvkwmcdasklcmlacvmkwlxovcowmalvadwmaldknknas\n","recorded":"2025-05-16 20:43:56.192230433","filePath":"null","pinned":false},{"value":"{\n  \"neovim/nvim-lspconfig\",\n  event = \"LazyFile\",\n  dependencies = {\n    \"mason.nvim\",\n    { \"mason-org/mason-lspconfig.nvim\", config = function() end },\n  },\n  opts = function()\n    ---@class PluginLspOpts\n    local ret = {\n      -- options for vim.diagnostic.config()\n      ---@type vim.diagnostic.Opts\n      diagnostics = {\n        underline = true,\n        update_in_insert = false,\n        virtual_text = {\n          spacing = 4,\n          source = \"if_many\",\n          prefix = \"‚óè\",\n          -- this will set set the prefix to a function that returns the diagnostics icon based on the severity\n          -- this only works on a recent 0.10.0 build. Will be set to \"‚óè\" when not supported\n          -- prefix = \"icons\",\n        },\n        severity_sort = true,\n        signs = {\n          text = {\n            [vim.diagnostic.severity.ERROR] = LazyVim.config.icons.diagnostics.Error,\n            [vim.diagnostic.severity.WARN] = LazyVim.config.icons.diagnostics.Warn,\n            [vim.diagnostic.severity.HINT] = LazyVim.config.icons.diagnostics.Hint,\n            [vim.diagnostic.severity.INFO] = LazyVim.config.icons.diagnostics.Info,\n          },\n        },\n      },\n      -- Enable this to enable the builtin LSP inlay hints on Neovim \u003e= 0.10.0\n      -- Be aware that you also will need to properly configure your LSP server to\n      -- provide the inlay hints.\n      inlay_hints = {\n        enabled = true,\n        exclude = { \"vue\" }, -- filetypes for which you don't want to enable inlay hints\n      },\n      -- Enable this to enable the builtin LSP code lenses on Neovim \u003e= 0.10.0\n      -- Be aware that you also will need to properly configure your LSP server to\n      -- provide the code lenses.\n      codelens = {\n        enabled = false,\n      },\n      -- add any global capabilities here\n      capabilities = {\n        workspace = {\n          fileOperations = {\n            didRename = true,\n            willRename = true,\n          },\n        },\n      },\n      -- options for vim.lsp.buf.format\n      -- `bufnr` and `filter` is handled by the LazyVim formatter,\n      -- but can be also overridden when specified\n      format = {\n        formatting_options = nil,\n        timeout_ms = nil,\n      },\n      -- LSP Server Settings\n      ---@type lspconfig.options\n      servers = {\n        lua_ls = {\n          -- mason = false, -- set to false if you don't want this server to be installed with mason\n          -- Use this to add any additional keymaps\n          -- for specific lsp servers\n          -- ---@type LazyKeysSpec[]\n          -- keys = {},\n          settings = {\n            Lua = {\n              workspace = {\n                checkThirdParty = false,\n              },\n              codeLens = {\n                enable = true,\n              },\n              completion = {\n                callSnippet = \"Replace\",\n              },\n              doc = {\n                privateName = { \"^_\" },\n              },\n              hint = {\n                enable = true,\n                setType = false,\n                paramType = true,\n                paramName = \"Disable\",\n                semicolon = \"Disable\",\n                arrayIndex = \"Disable\",\n              },\n            },\n          },\n        },\n      },\n      -- you can do any additional lsp server setup here\n      -- return true if you don't want this server to be setup with lspconfig\n      ---@type table\u003cstring, fun(server:string, opts:_.lspconfig.options):boolean?\u003e\n      setup = {\n        -- example to setup with typescript.nvim\n        -- tsserver = function(_, opts)\n        --   require(\"typescript\").setup({ server = opts })\n        --   return true\n        -- end,\n        -- Specify * to use this function as a fallback for any server\n        -- [\"*\"] = function(server, opts) end,\n      },\n    }\n    return ret\n  end,\n  ---@param opts PluginLspOpts\n  config = function(_, opts)\n    -- setup autoformat\n    LazyVim.format.register(LazyVim.lsp.formatter())\n\n    -- setup keymaps\n    LazyVim.lsp.on_attach(function(client, buffer)\n      require(\"lazyvim.plugins.lsp.keymaps\").on_attach(client, buffer)\n    end)\n\n    LazyVim.lsp.setup()\n    LazyVim.lsp.on_dynamic_capability(require(\"lazyvim.plugins.lsp.keymaps\").on_attach)\n\n    -- diagnostics signs\n    if vim.fn.has(\"nvim-0.10.0\") == 0 then\n      if type(opts.diagnostics.signs) ~= \"boolean\" then\n        for severity, icon in pairs(opts.diagnostics.signs.text) do\n          local name = vim.diagnostic.severity[severity]:lower():gsub(\"^%l\", string.upper)\n          name = \"DiagnosticSign\" .. name\n          vim.fn.sign_define(name, { text = icon, texthl = name, numhl = \"\" })\n        end\n      end\n    end\n\n    if vim.fn.has(\"nvim-0.10\") == 1 then\n      -- inlay hints\n      if opts.inlay_hints.enabled then\n        LazyVim.lsp.on_supports_method(\"textDocument/inlayHint\", function(client, buffer)\n          if\n            vim.api.nvim_buf_is_valid(buffer)\n            and vim.bo[buffer].buftype == \"\"\n            and not vim.tbl_contains(opts.inlay_hints.exclude, vim.bo[buffer].filetype)\n          then\n            vim.lsp.inlay_hint.enable(true, { bufnr = buffer })\n          end\n        end)\n      end\n\n      -- code lens\n      if opts.codelens.enabled and vim.lsp.codelens then\n        LazyVim.lsp.on_supports_method(\"textDocument/codeLens\", function(client, buffer)\n          vim.lsp.codelens.refresh()\n          vim.api.nvim_create_autocmd({ \"BufEnter\", \"CursorHold\", \"InsertLeave\" }, {\n            buffer = buffer,\n            callback = vim.lsp.codelens.refresh,\n          })\n        end)\n      end\n    end\n\n    if type(opts.diagnostics.virtual_text) == \"table\" and opts.diagnostics.virtual_text.prefix == \"icons\" then\n      opts.diagnostics.virtual_text.prefix = vim.fn.has(\"nvim-0.10.0\") == 0 and \"‚óè\"\n        or function(diagnostic)\n          local icons = LazyVim.config.icons.diagnostics\n          for d, icon in pairs(icons) do\n            if diagnostic.severity == vim.diagnostic.severity[d:upper()] then\n              return icon\n            end\n          end\n        end\n    end\n\n    vim.diagnostic.config(vim.deepcopy(opts.diagnostics))\n\n    local servers = opts.servers\n    local has_cmp, cmp_nvim_lsp = pcall(require, \"cmp_nvim_lsp\")\n    local has_blink, blink = pcall(require, \"blink.cmp\")\n    local capabilities = vim.tbl_deep_extend(\n      \"force\",\n      {},\n      vim.lsp.protocol.make_client_capabilities(),\n      has_cmp and cmp_nvim_lsp.default_capabilities() or {},\n      has_blink and blink.get_lsp_capabilities() or {},\n      opts.capabilities or {}\n    )\n\n    local function setup(server)\n      local server_opts = vim.tbl_deep_extend(\"force\", {\n        capabilities = vim.deepcopy(capabilities),\n      }, servers[server] or {})\n      if server_opts.enabled == false then\n        return\n      end\n\n      if opts.setup[server] then\n        if opts.setup[server](server, server_opts) then\n          return\n        end\n      elseif opts.setup[\"*\"] then\n        if opts.setup[\"*\"](server, server_opts) then\n          return\n        end\n      end\n      require(\"lspconfig\")[server].setup(server_opts)\n    end\n\n    -- get all the servers that are available through mason-lspconfig\n    local have_mason, mlsp = pcall(require, \"mason-lspconfig\")\n    local all_mslp_servers = {}\n    if have_mason then\n      all_mslp_servers = vim.tbl_keys(require(\"mason-lspconfig.mappings.server\").lspconfig_to_package)\n    end\n\n    local ensure_installed = {} ---@type string[]\n    for server, server_opts in pairs(servers) do\n      if server_opts then\n        server_opts = server_opts == true and {} or server_opts\n        if server_opts.enabled ~= false then\n          -- run manual setup if mason=false or if this is a server that cannot be installed with mason-lspconfig\n          if server_opts.mason == false or not vim.tbl_contains(all_mslp_servers, server) then\n            setup(server)\n          else\n            ensure_installed[#ensure_installed + 1] = server\n          end\n        end\n      end\n    end\n\n    if have_mason then\n      mlsp.setup({\n        ensure_installed = vim.tbl_deep_extend(\n          \"force\",\n          ensure_installed,\n          LazyVim.opts(\"mason-lspconfig.nvim\").ensure_installed or {}\n        ),\n        handlers = { setup },\n      })\n    end\n\n    if LazyVim.lsp.is_enabled(\"denols\") and LazyVim.lsp.is_enabled(\"vtsls\") then\n      local is_deno = require(\"lspconfig.util\").root_pattern(\"deno.json\", \"deno.jsonc\")\n      LazyVim.lsp.disable(\"vtsls\", is_deno)\n      LazyVim.lsp.disable(\"denols\", function(root_dir, config)\n        if not is_deno(root_dir) then\n          config.settings.deno.enable = false\n        end\n        return false\n      end)\n    end\n  end,\n}","recorded":"2025-05-16 20:37:55.835876840","filePath":"null","pinned":false},{"value":"\n","recorded":"2025-05-16 20:32:51.519667559","filePath":"null","pinned":false},{"value":")","recorded":"2025-05-16 20:32:40.464846804","filePath":"null","pinned":false},{"value":"printf(\"%i\", ","recorded":"2025-05-16 20:32:32.785883306","filePath":"null","pinned":false},{"value":"EXIT_SUCCESS","recorded":"2025-05-16 20:32:10.573247618","filePath":"null","pinned":false},{"value":"int ","recorded":"2025-05-16 20:32:04.476311437","filePath":"null","pinned":false},{"value":"name:III","recorded":"2025-05-15 23:45:33.688986784","filePath":"null","pinned":false},{"value":"3","recorded":"2025-05-15 23:44:52.754142884","filePath":"null","pinned":false},{"value":" ","recorded":"2025-05-15 23:41:03.002553882","filePath":"null","pinned":false},{"value":"SemiBold","recorded":"2025-05-15 23:41:02.390336444","filePath":"null","pinned":false},{"value":"import Quickshell\nimport Quickshell.Io // for Process\nimport QtQuick\n\nShellRoot {\n  PanelWindow {\n    anchors {\n      top: true\n      left: true\n      right: true\n    }\n\n    implicitHeight: 30\n\n    Text {\n      // give the text an ID we can refer to elsewhere in the file\n      id: clock\n\n      anchors.centerIn: parent\n\n      // create a process management object\n      Process {\n        // the command it will run, every argument is its own string\n        command: [\"date\"]\n\n        // run the command immediately\n        running: true\n\n        // process the stdout stream using a SplitParser\n        // which returns chunks of output after a delimiter\n        stdout: SplitParser {\n          // listen for the read signal, which returns the data that was read\n          // from stdout, then write that data to the clock's text property\n          onRead: data =\u003e clock.text = data\n        }\n      }\n    }\n  }\n}","recorded":"2025-05-15 23:34:17.103728208","filePath":"null","pinned":false},{"value":"import Quickshell\nimport QtQuick\n\nShellRoot {\n  PanelWindow {\n    anchors {\n      top: true\n      left: true\n      right: true\n    }\n    \n    implicitHeight: 30\n\n    Text {\n      id: clock\n\n      anchors.centerIn: parent\n\n      Process {\n        command: [\"date\"]\n\n        running: true\n\n        stdout: SplitParser {\n          onRead: data =\u003e clock.text = data\n        }\n      }\n    }\n  }\n}\n","recorded":"2025-05-15 23:34:10.970392971","filePath":"null","pinned":false},{"value":"      text: \"Hello world\"\n","recorded":"2025-05-15 22:06:00.410039631","filePath":"null","pinned":false},{"value":"source = ~/.config/hypr/monitors.conf\n","recorded":"2025-05-15 21:37:25.339832273","filePath":"null","pinned":false},{"value":"#","recorded":"2025-05-15 21:37:09.633458868","filePath":"null","pinned":false},{"value":"monitor=HDMI-A-1,disable\n","recorded":"2025-05-15 21:36:46.671250721","filePath":"null","pinned":false},{"value":"monitor=HDMI-A-1,1920x1080@60.0,1920x0,1.0,mirror,eDP-1\n","recorded":"2025-05-15 21:36:46.360177199","filePath":"null","pinned":false},{"value":"Twitch","recorded":"2025-05-15 21:27:36.126895826","filePath":"null","pinned":false},{"value":"windowrule = tag +video, title:(.*Twitch.*)\n","recorded":"2025-05-15 21:27:33.043344742","filePath":"null","pinned":false},{"value":"      // center the bar\n","recorded":"2025-05-15 20:29:44.527576944","filePath":"null","pinned":false},{"value":"XDG_CONFIG_HOME","recorded":"2025-05-15 20:24:35.282257427","filePath":"null","pinned":false},{"value":"yay -S quickshell","recorded":"2025-05-15 19:54:54.434828552","filePath":"null","pinned":false},{"value":"*/","recorded":"2025-05-15 19:52:44.578651758","filePath":"null","pinned":false},{"value":"/*","recorded":"2025-05-15 19:52:42.599862789","filePath":"null","pinned":false},{"value":"transparent","recorded":"2025-05-15 19:52:41.016286529","filePath":"null","pinned":false},{"value":"git clone https://github.com/DreamMaoMao/hych.git\ncd hych\nbash install.sh # `libhych.so` path: /usr/lib/libhych.so","recorded":"2025-05-15 19:49:47.596320322","filePath":"null","pinned":false},{"value":"\n[[manager.prepend_keymap]]\non   = \"!\"\nfor  = \"unix\"\nrun  = 'shell \"$SHELL\" --block'\ndesc = \"Open $SHELL here\"\n\n","recorded":"2025-05-14 19:01:03.815741820","filePath":"null","pinned":false},{"value":"[manager.prepend_keymap]]\non   = \"!\"\nfor  = \"unix\"\nrun  = 'shell \"$SHELL\" --block'\ndesc = \"Open $SHELL here\"\n","recorded":"2025-05-14 18:58:57.476487591","filePath":"null","pinned":false},{"value":"[[manager.prepend_keymap]]\non   = [\"c\", \"i\"]\nrun  = \"plugin sxiv\"\ndesc = \"Preview images in sxiv\"","recorded":"2025-05-14 18:45:16.696147249","filePath":"null","pinned":false},{"value":"ya pack -a NoponyAsked/sxiv","recorded":"2025-05-14 18:44:52.137587871","filePath":"null","pinned":false},{"value":"[manager]\nprepend_keymap = [\n    { on = \"\u003cC-1\u003e\", run = \"plugin toggle-view --args=parent\", desc = \"Toggle parent\" },\n    { on = \"\u003cC-2\u003e\", run = \"plugin toggle-view --args=current\", desc = \"Toggle current\" },\n    { on = \"\u003cC-3\u003e\", run = \"plugin toggle-view --args=preview\", desc = \"Toggle preview\" },\n]\n","recorded":"2025-05-14 18:41:29.325093968","filePath":"null","pinned":false},{"value":"[manager]\nprepend_keymap = [\n    { on = \"\u003cC-1\u003e\", run = \"plugin toggle-view --args=parent\", desc = \"Toggle parent\" },\n    { on = \"\u003cC-2\u003e\", run = \"plugin toggle-view --args=current\", desc = \"Toggle current\" },\n    { on = \"\u003cC-3\u003e\", run = \"plugin toggle-view --args=preview\", desc = \"Toggle preview\" },\n]","recorded":"2025-05-14 18:40:25.510029356","filePath":"null","pinned":false},{"value":"ya pack -a dawsers/toggle-view","recorded":"2025-05-14 18:40:19.024070750","filePath":"null","pinned":false},{"value":"/home/Administrator/Documents/test","recorded":"2025-05-14 18:29:03.443982163","filePath":"null","pinned":false},{"value":"[[manager.prepend_keymap]]\non   = \"!\"\nfor  = \"unix\"\nrun  = 'shell \"$SHELL\" --block'\ndesc = \"Open $SHELL here\"\n","recorded":"2025-05-14 18:17:27.406314102","filePath":"null","pinned":false},{"value":"\"$1\"","recorded":"2025-05-14 18:13:13.849587682","filePath":"null","pinned":false},{"value":"run = ''' shell 'dragon-drop -t \"$1\"' '''\n","recorded":"2025-05-14 18:13:08.606444230","filePath":"null","pinned":false},{"value":"T","recorded":"2025-05-14 18:13:06.223970586","filePath":"null","pinned":false},{"value":"t","recorded":"2025-05-14 18:12:40.351419098","filePath":"null","pinned":false},{"value":"A","recorded":"2025-05-14 18:11:34.356931423","filePath":"null","pinned":false},{"value":"L","recorded":"2025-05-14 18:11:33.628287152","filePath":"null","pinned":false},{"value":"C","recorded":"2025-05-14 18:11:13.978051120","filePath":"null","pinned":false}]}